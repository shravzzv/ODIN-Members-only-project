/* Components are interactive building blocks for creating a user interface. All styles below emulate the material design 3 components. */

.card {
  background-color: var(--surface-container);
  color: var(--on-surface);
  border-radius: 12px;
  cursor: pointer;
  transition: box-shadow 300ms ease;

  & svg {
    fill: var(--primary);
    width: 24px;
  }

  & img {
    border-radius: inherit;
  }

  &.elevated {
    background-color: var(--surface-container-low);
    box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 1px -1px,
      rgba(0, 0, 0, 0.14) 0px 1px 1px 0px, rgba(0, 0, 0, 0.12) 0px 1px 3px 0px;
  }

  &.filled {
    background-color: var(--surface-container-highest);
    box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 0px 0px,
      rgba(0, 0, 0, 0.14) 0px 0px 0px 0px, rgba(0, 0, 0, 0.12) 0px 0px 0px 0px;
  }

  &.outlined {
    background-color: var(--surface);
    box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 0px 0px,
      rgba(0, 0, 0, 0.14) 0px 0px 0px 0px, rgba(0, 0, 0, 0.12) 0px 0px 0px 0px;
    outline: 1px solid var(--outline-variant);
  }

  &:hover,
  &:focus {
    box-shadow: rgba(0, 0, 0, 0.2) 0px 3px 3px -2px,
      rgba(0, 0, 0, 0.14) 0px 3px 4px 0px, rgba(0, 0, 0, 0.12) 0px 1px 8px 0px;
  }

  &:disabled {
    background-color: var(--surface);
  }
}

.chip {
  height: 32px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  padding: 0px 16px;
  background-color: var(--surface-container-low);
  outline: 1px solid var(--outline);
  color: var(--on-surface-variant);
  transition: background-color 300ms ease;

  span,
  .labelText {
    color: var(--on-surface-variant);
    font-size: 14px;
    line-height: 20px;
    font-weight: 500;
  }

  &:hover,
  &:focus {
    background-color: var(--surface-container-high);
  }
}

button {
  font-size: 14px;
  height: 40px;
  border-radius: 20px;
  padding: 0 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  border: none;
  cursor: pointer;
  background-color: var(--surface-container);
  color: var(--on-surface-variant);
  position: relative;

  /* the state layer */
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: inherit;
    opacity: 0%;
    background-color: var(--on-surface-variant);
    transition: opacity 300ms ease;
  }

  &:has(svg) {
    padding-left: 16px;

    & svg {
      width: 18px;
      fill: var(--on-surface);
    }
  }

  &.elevated {
    background-color: var(--surface-container-low);
    color: var(--primary);
    box-shadow: rgba(0, 0, 0, 0.24) 0px 2px 2px;
    transition: box-shadow 300ms ease;

    & svg {
      fill: var(--primary);
    }

    &::after {
      background-color: var(--primary);
    }

    &:hover {
      box-shadow: rgba(0, 0, 0, 0.24) 0px 2px 6px;
    }
  }

  &.filled {
    background-color: var(--primary);
    color: var(--on-primary);

    & svg {
      fill: var(--on-primary);
    }

    &::after {
      background-color: var(--on-primary);
    }
  }

  &.filled-tonal {
    background-color: var(--secondary-container);
    color: var(--on-secondary-container);
    transition: box-shadow 300ms ease;

    & svg {
      fill: var(--on-secondary-container);
    }

    &::after {
      background-color: var(--on-secondary-container);
    }

    &:hover {
      box-shadow: rgba(0, 0, 0, 0.24) 0px 2px 2px;
    }
  }

  &.outlined {
    background-color: var(--surface);
    color: var(--primary);
    outline: 1px solid var(--outline);

    & svg {
      fill: var(--primary);
    }

    &::after {
      background-color: var(--primary);
    }
  }

  &.text {
    background-color: transparent;
    color: var(--primary);

    & svg {
      fill: var(--primary);
    }

    &::after {
      background-color: var(--primary);
    }
  }

  &.icon {
    padding: 0;
    width: 40px;
    height: 40px;
    border-radius: 100%;
    background-color: var(--surface-container);

    svg {
      width: 24px;
      fill: var(--primary);
    }
  }

  &.fab {
    background-color: var(--primary-container);
    color: var(--on-primary-container);
    height: 56px;
    margin: 16px;
    border-radius: 16px;
    font-weight: 500;
    width: max-content;
    box-shadow: rgba(0, 0, 0, 0.2) 0px 3px 5px -1px,
      rgba(0, 0, 0, 0.14) 0px 6px 10px 0px, rgba(0, 0, 0, 0.12) 0px 1px 18px 0px;

    & svg {
      width: 24px;
      fill: var(--on-primary-container);
    }

    &:hover {
      box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 5px -3px,
        rgba(0, 0, 0, 0.14) 0px 8px 10px 1px,
        rgba(0, 0, 0, 0.12) 0px 3px 14px 2px;
    }
  }

  &:disabled {
    opacity: 38%;
    pointer-events: none;
  }

  &:hover::after {
    opacity: 8%;
  }

  &:focus::after {
    opacity: 10%;
  }

  &:active::after {
    opacity: 10%;
  }

  &[draggable='true'] {
    cursor: grab;

    &:active::after {
      cursor: grabbing;
      opacity: 16%;
    }
  }
}

dialog[open] {
  border-radius: 28px;
  min-width: 280px;
  max-width: 560px;
  padding: 24px;
  background-color: var(--surface-container-high);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  border: none;
  z-index: 1;
  box-shadow: var(--elevation-level-3);
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  margin: 0;

  p {
    margin: 0;
    padding: 0;
  }

  .icon {
    margin-bottom: 16px;
    fill: var(--secondary);
  }

  .headline {
    margin-bottom: 16px;
    color: var(--on-surface);
    line-height: 32px;
    font-size: 24px;
    font-weight: 400;
  }

  .supportingText {
    margin-bottom: 24px;
    color: var(--on-surface-variant);
    font-size: 14px;
    font-weight: 400;
  }

  .actions {
    display: flex;
    justify-content: flex-end;
    width: 100%;
  }

  &::backdrop {
    backdrop-filter: blur(15px);
  }
}

html:has(dialog[open]) {
  *:not(dialog, dialog *) {
    pointer-events: none;
  }

  dialog {
    pointer-events: all;
  }

  body {
    /* When the modal is shown, we want a fixed body to prevent bg scrolling. */
    position: fixed;
    overflow: hidden;
  }
}
